
@page
@model CampusBites.Web.Pages.MenuModel
@{
    ViewData["Title"] = "Menu";
}

<div class="container py-5">
    <div class="text-center mb-5 animate__animated animate__fadeIn">
        <h3 class="display-5 fw-bold text-gradient mb-2">@ViewData["Title"]</h3>
        <div class="d-flex justify-content-center">
            <div class="bg-primary" style="height: 4px; width: 80px; border-radius: 2px;"></div>
        </div>
    </div>

    <!-- Category Filter -->
    <div class="row mb-4 animate__animated animate__fadeInUp">
        <div class="col-12">
            <div class="d-flex flex-wrap justify-content-center gap-2" id="category-filters">
                <button class="btn btn-outline-primaryss rounded-pill px-4 active" data-category="all">All Items</button>
                <!-- Categories will be added dynamically via JavaScript -->
            </div>
        </div>
    </div>

    <!-- Menu Items Grid -->
    <div class="row g-4" id="menu-items-container">
        <div class="col-12 text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3">Loading delicious options...</p>
        </div>
    </div>
</div>

<style>

    /* Menu Page Specific Styles */
    .menu-item-card {
        border: none;
        border-radius: 1rem;
        overflow: hidden;
        transition: all 0.3s ease;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
        background: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(10px);
        height: 100%;
    }

    [data-bs-theme="dark"] .menu-item-card {
        background: rgba(30, 30, 30, 0.9);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    }

    .menu-item-card:hover {
        transform: translateY(-10px);
        box-shadow: 0 15px 30px rgba(255, 91, 0, 0.15);
    }

    .menu-item-img {
        height: 220px;
        object-fit: cover;
        transition: transform 0.5s ease;
    }

    .menu-item-card:hover .menu-item-img {
        transform: scale(1.05);
    }

    .menu-item-placeholder {
        height: 220px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(45deg, #f5f5f5, #e0e0e0);
    }

    [data-bs-theme="dark"] .menu-item-placeholder {
        background: linear-gradient(45deg, #2a2a2a, #1a1a1a);
    }

    .menu-item-title {
        font-weight: 600;
        color: var(--dark-color);
        margin-bottom: 0.75rem;
    }

    [data-bs-theme="dark"] .menu-item-title {
        color: #f0f0f0;
    }

    .menu-item-category {
        display: inline-block;
        background-color: var(--primary-light);
        color: var(--primary-color);
        padding: 0.25rem 0.75rem;
        border-radius: 1rem;
        font-size: 0.75rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
    }

    .menu-item-price {
        font-weight: 700;
        font-size: 1.25rem;
        color: var(--primary-color);
        margin: 0.5rem 0;
    }

    .add-to-cart-btn {
        position: relative;
        overflow: hidden;
        border: none;
        font-weight: 600;
        letter-spacing: 0.5px;
        transition: all 0.3s ease;
    }

        .add-to-cart-btn:disabled {
            background-color: #6c757d !important;
        }

        .add-to-cart-btn:not(:disabled):hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(255, 91, 0, 0.3);
        }

    :root {
        --bs-primary: #FF5B00;
        --bs-primary-rgb: 255, 91, 0;
    }

    .btn-outline-primaryss {
        --bs-btn-color: black;
        --bs-btn-border-color: #FF5B00;
        --bs-btn-hover-color: #fff;
        --bs-btn-hover-bg: #FF5B00;
        --bs-btn-hover-border-color: #FF5B00;
        --bs-btn-focus-shadow-rgb: 13,110,253;
        --bs-btn-active-color: #fff;
        --bs-btn-active-bg: #FF5B00;
        --bs-btn-active-border-color: #FF5B00;
        --bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);
        --bs-btn-disabled-color: #FF5B00;
        --bs-btn-disabled-bg: transparent;
        --bs-btn-disabled-border-color: #FF5B00;
        --bs-gradient: none;
    }

    .btn-outline-secondary {
        --bs-btn-color: #6c757d;
        --bs-btn-border-color = .add-to-cart-btn:after {
            content: "";
            position: absolute;
            top: 50%;
            left: 50%;
            width: 5px;
            height: 5px;
            background: rgba(255, 255, 255, 0.5);
            opacity: 0;
            border-radius: 100%;
            transform: scale(1, 1) translate(-50%);
            transform-origin: 50% 50%;
        }

        .add-to-cart-btn:focus:not(:active)::after {
            animation: ripple 0.6s ease-out;
        }

   
    /* Category filter buttons */
    .btn-outline-primary.active {
        background-color: var(--primary-color);
        color: white;
        border-color: var(--primary-color);
    }
    /* Loading animation */


    .loading-text {
        animation: pulse 1.5s infinite;
    }

</style>

@section Scripts {
    <script>
        // Function to update cart count display
        function updateCartCount(count) {
            const cartCountElement = document.getElementById('cart-count-display');
            if (cartCountElement) {
                cartCountElement.textContent = count;
                cartCountElement.style.display = count > 0 ? 'inline-block' : 'none';
                // Add animation when count changes
                if (count > 0) {
                    cartCountElement.classList.add('animate__animated', 'animate__bounceIn');
                    setTimeout(() => {
                        cartCountElement.classList.remove('animate__animated', 'animate__bounceIn');
                    }, 1000);
                }
            }
        }

        // Function to fetch initial cart count
        function fetchInitialCartCount() {
            fetch('/api/cart/count')
                .then(response => response.ok ? response.json() : Promise.reject('Failed to fetch count'))
                .then(data => {
                    updateCartCount(data.count);
                })
                .catch(error => console.error('Error fetching initial cart count:', error));
        }

        // Function to filter menu items by category
        function filterMenuItems(category) {
            const allItems = document.querySelectorAll('.menu-item-card-container');

            allItems.forEach(item => {
                const itemCategory = item.getAttribute('data-category').toLowerCase();
                if (category === 'all' || itemCategory === category.toLowerCase()) {
                    item.style.display = 'block';
                    item.classList.add('animate__animated', 'animate__fadeIn');
                } else {
                    item.style.display = 'none';
                }
            });
        }

        document.addEventListener('DOMContentLoaded', function () {
            const menuContainer = document.getElementById('menu-items-container');
            const categoryFilters = document.getElementById('category-filters');

            // Fetch and display menu items
            fetch('/api/menuitems')
                .then(response => {
                    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                    return response.json();
                })
                .then(menuItems => {
                    menuContainer.innerHTML = ''; // Clear loading message

                    if (!menuItems || menuItems.length === 0) {
                        menuContainer.innerHTML = `
                            <div class="col-12 py-5 text-center animate__animated animate__fadeIn">
                                <i class="bi bi-emoji-frown fs-1 text-muted mb-3"></i>
                                <h4 class="text-muted">No menu items available</h4>
                                <p>Please check back later</p>
                            </div>
                        `;
                        return;
                    }

                    // Get unique categories for filters
                    const categories = [...new Set(menuItems.map(item => item.category))];

                    // Add category filter buttons
                    categories.forEach(category => {
                        const button = document.createElement('button');
                        button.className = 'btn btn-outline-primaryss rounded-pill px-4';
                        button.textContent = category;
                        button.dataset.category = category.toLowerCase();
                        button.addEventListener('click', function() {
                            document.querySelectorAll('#category-filters button').forEach(btn => {
                                btn.classList.remove('active');
                            });
                            this.classList.add('active');
                            filterMenuItems(this.dataset.category);
                        });
                        categoryFilters.appendChild(button);
                    });

                    // Create menu items
                    menuItems.forEach(item => {
                        const cardHtml = `
                            <div class="col-lg-4 col-md-6 menu-item-card-container animate__animated animate__fadeIn" data-category="${item.category.toLowerCase()}">
                                <div class="menu-item-card h-100">
                                    ${item.imageUrl ? `
                                        <div class="overflow-hidden">
                                            <img src="${item.imageUrl}" class="menu-item-img w-100" alt="${item.name}">
                                        </div>
                                    ` : `
                                        <div class="menu-item-placeholder">
                                            <i class="bi bi-cup-hot fs-1 text-muted"></i>
                                        </div>
                                    `}
                                    <div class="card-body d-flex flex-column p-4">
                                        <span class="menu-item-category">${item.category}</span>
                                        <h3 class="menu-item-title">${item.name}</h3>
                                        <p class="card-text flex-grow-1 text-muted">${item.description || 'No description available'}</p>
                                        <p class="menu-item-price">RWF ${item.price.toFixed(2)}</p>
                                        ${item.isAvailable
                                            ? `<button class="btn btn-primary add-to-cart-btn" data-item-id="${item.id}">
                                                <span class="add-to-cart-text">Add to Cart</span>
                                               </button>`
                                            : `<button class="btn btn-secondary" disabled>Out of Stock</button>`
                                        }
                                    </div>
                                </div>
                            </div>
                        `;
                        menuContainer.insertAdjacentHTML('beforeend', cardHtml);
                    });

                    // Add event listeners for cart buttons
                    document.querySelectorAll('.add-to-cart-btn').forEach(button => {
                        button.addEventListener('click', function() {
                            const itemId = this.getAttribute('data-item-id');
                            const buttonText = this.querySelector('.add-to-cart-text');

                            // Disable button and show loading state
                            this.disabled = true;
                            const originalText = buttonText.textContent;
                            buttonText.textContent = 'Adding...';

                            // Add ripple effect
                            this.classList.add('active');

                            fetch(`/api/cart/add/${itemId}`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({ quantity: 1 })
                            })
                            .then(response => {
                                if (!response.ok) {
                                    return response.json().then(err => Promise.reject(err)).catch(() => Promise.reject('HTTP error! Status: ' + response.status));
                                }
                                return response.json();
                            })
                            .then(data => {
                                // Success animation
                                this.classList.add('btn-success');
                                buttonText.textContent = 'Added!';
                                updateCartCount(data.newCount);

                                // Reset button after delay
                                setTimeout(() => {
                                    this.disabled = false;
                                    this.classList.remove('btn-success', 'active');
                                    buttonText.textContent = originalText;
                                }, 1500);
                            })
                            .catch(error => {
                                console.error('Error adding item to cart:', error);
                                // Error state
                                this.classList.add('btn-danger');
                                buttonText.textContent = 'Failed';

                                // Reset after delay
                                setTimeout(() => {
                                    this.disabled = false;
                                    this.classList.remove('btn-danger', 'active');
                                    buttonText.textContent = originalText;
                                }, 1500);
                            });
                        });
                    });
                })
                .catch(error => {
                    console.error('Error fetching menu items:', error);
                    menuContainer.innerHTML = `
                        <div class="col-12 py-5 text-center animate__animated animate__fadeIn">
                            <i class="bi bi-exclamation-triangle-fill fs-1 text-danger mb-3"></i>
                            <h4 class="text-danger">Failed to load menu</h4>
                            <p>Please try again later</p>
                        </div>
                    `;
                });

            // Fetch initial cart count
            fetchInitialCartCount();
        });
    </script>
}