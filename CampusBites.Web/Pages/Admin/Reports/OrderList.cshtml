@page
@model CampusBites.Web.Pages.Admin.Reports.OrderListModel
@using CampusBites.Domain.Enums
@{
    ViewData["Title"] = "Order Management";
    var cultureInfo = new System.Globalization.CultureInfo("fr-RW");
    var startDateFilter = Model.StartDate?.ToString("o");
    var endDateFilter = Model.EndDate?.ToString("o");
}

<div class="container-fluid py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="display-5 fw-bold mb-2">@ViewData["Title"]</h1>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a asp-page="/Admin/Dashboard/Index">Dashboard</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Orders</li>
                </ol>
            </nav>
        </div>
        <div class="export-buttons">
            <div class="btn-group" role="group">
                <a asp-page-handler="ExportExcel" asp-route-startDate="@startDateFilter" asp-route-endDate="@endDateFilter"
                   class="btn btn-success">
                    <i class="bi bi-file-earmark-excel me-1"></i> Excel
                </a>
                <a asp-page-handler="ExportPdf" asp-route-startDate="@startDateFilter" asp-route-endDate="@endDateFilter"
                   class="btn btn-danger">
                    <i class="bi bi-file-earmark-pdf me-1"></i> PDF
                </a>
            </div>
        </div>
    </div>

    <!-- Alerts -->
    @if (!string.IsNullOrEmpty(Model.Message))
    {
        <div class="alert alert-success alert-dismissible fade show animate__animated animate__fadeIn" role="alert">
            <i class="bi bi-check-circle-fill me-2"></i> @Model.Message
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show animate__animated animate__shakeX" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i> @Model.ErrorMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Filter Card -->
    <div class="card border-0 shadow-sm mb-4 animate__animated animate__fadeIn">
        <div class="card-body">
            <form method="get" class="row g-3">
                <div class="col-md-3">
                    <label asp-for="StartDate" class="form-label">From Date</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-calendar"></i></span>
                        <input asp-for="StartDate" type="date" class="form-control" asp-format="{0:yyyy-MM-dd}" />
                    </div>
                </div>
                <div class="col-md-3">
                    <label asp-for="EndDate" class="form-label">To Date</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-calendar"></i></span>
                        <input asp-for="EndDate" type="date" class="form-control" asp-format="{0:yyyy-MM-dd}" />
                    </div>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Status</label>
                    <select class="form-select"  asp-items="Html.GetEnumSelectList<OrderStatus>()">
                        <option value="">All Statuses</option>
                    </select>
                </div>
                <div class="col-md-3 d-flex align-items-end">
                    <button type="submit" class="btn btn-primary me-2">
                        <i class="bi bi-funnel me-1"></i> Filter
                    </button>
                    <a asp-page="./OrderList" class="btn btn-outline-secondary">
                        <i class="bi bi-arrow-counterclockwise me-1"></i> Reset
                    </a>
                </div>
            </form>
        </div>
    </div>

    <!-- Orders Card -->
    <div class="card border-0 shadow-sm animate__animated animate__fadeIn">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover align-middle mb-0">
                    <thead class="table-light">
                        <tr>
                            <th>Order ID</th>
                            <th>Customer</th>
                            <th>Date</th>
                            <th>Amount</th>
                            <th>Status</th>
                            <th>Items</th>
                            <th>Payment</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (!Model.Orders.Any())
                        {
                            <tr>
                                <td colspan="8" class="text-center py-4">
                                    <i class="bi bi-inbox text-muted fs-1"></i>
                                    <h5 class="mt-2">No orders found</h5>
                                    <p class="text-muted">Try adjusting your filters</p>
                                </td>
                            </tr>
                        }
                        else
                        {
                            @foreach (var order in Model.Orders)
                            {
                                <tr>
                                    <td>
                                        <span class="fw-bold">#@order.Id</span>
                                    </td>
                                    <td>
                                        @if (Model.UserEmails.TryGetValue(order.UserId, out var email))
                                        {
                                            <div class="d-flex align-items-center">
                                                <div class="avatar avatar-sm me-2">
                                                    <span class="avatar-initial rounded-circle bg-primary text-white">
                                                        @email[0].ToString().ToUpper()
                                                    </span>
                                                </div>
                                                <div>
                                                    <span class="d-block">@email</span>
                                                    <small class="text-muted">User ID: @order.UserId</small>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <span class="text-muted">N/A</span>
                                        }
                                    </td>
                                    <td>@order.OrderDate.ToString("g", cultureInfo)</td>
                                    <td class="fw-bold">@order.OrderTotal.ToString("C", cultureInfo)</td>
                                    <td>
                                        <span class="badge @GetStatusBadgeClass(order.Status)">@order.Status</span>
                                    </td>
                                    <td>@order.NumberOfItems</td>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <i class="bi @GetPaymentMethodIcon(order.PaymentMethod) me-2 text-muted"></i>
                                            <span>@order.PaymentMethod</span>
                                        </div>
                                        @if (!string.IsNullOrEmpty(order.PaymentReference))
                                        {
                                            <small class="text-muted d-block">Ref: @order.PaymentReference</small>
                                        }
                                    </td>
                                    <td>
                                        <div class="d-flex gap-2">
                                            <a asp-page="/OrderDetails" asp-route-id="@order.Id"
                                               class="btn btn-sm btn-outline-primary" title="View Details">
                                                <i class="bi bi-eye"></i>
                                            </a>

                                            <form method="post" asp-page-handler="UpdateStatus" class="d-flex gap-2">
                                                <input type="hidden" name="OrderIdToUpdate" value="@order.Id" />
                                                <select name="NewStatus" class="form-select form-select-sm"
                                                        asp-for="@Model.NewStatus" asp-items="Html.GetEnumSelectList<OrderStatus>()">
                                                    <option value="">Update</option>
                                                </select>
                                                <button type="submit" class="btn btn-sm btn-outline-success" title="Update Status">
                                                    <i class="bi bi-check"></i>
                                                </button>
                                            </form>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@functions {
    string GetStatusBadgeClass(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Pending => "bg-warning text-dark",
            OrderStatus.Processing => "bg-info text-white",
            OrderStatus.Completed => "bg-success text-white",
            OrderStatus.Cancelled => "bg-danger text-white",
            _ => "bg-secondary text-white",
        };
    }

    string GetPaymentMethodIcon(string paymentMethod)
    {
        return paymentMethod switch
        {
            "MTNMoMo" => "bi-phone",
            "AirtelMoney" => "bi-phone",
            "CreditCard" => "bi-credit-card",
            "Cash" => "bi-cash",
            _ => "bi-wallet2",
        };
    }
}



@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Make table responsive for mobile
            const tableCells = document.querySelectorAll('.table td');

            if (window.innerWidth < 768) {
                const headers = ['Order ID', 'Customer', 'Date', 'Amount', 'Status', 'Items', 'Payment', 'Actions'];
                tableCells.forEach((td, index) => {
                    td.setAttribute('data-label', headers[index % headers.length]);
                });
            }

            // Add animation to status dropdown changes
            document.querySelectorAll('select[name="NewStatus"]').forEach(select => {
                select.addEventListener('change', function() {
                    if (this.value) {
                        const row = this.closest('tr');
                        row.classList.add('animate__animated', 'animate__pulse');
                        setTimeout(() => {
                            row.classList.remove('animate__animated', 'animate__pulse');
                        }, 1000);
                    }
                });
            });
        });
    </script>
}