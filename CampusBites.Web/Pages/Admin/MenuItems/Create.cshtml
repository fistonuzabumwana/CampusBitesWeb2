@page
@model CampusBites.Web.Pages.Admin.MenuItems.CreateModel
@{
    ViewData["Title"] = "Create Menu Item";
}

<div class="admin-create-container animate__animated animate__fadeIn">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="display-5 fw-bold text-gradient mb-1">@ViewData["Title"]</h1>
            <p class="text-muted">Add a new delicious item to your menu</p>
        </div>
        <a asp-page="./Index" class="btn btn-outline-secondary btn-icon">
            <i class="bi bi-arrow-left"></i> Back to List
        </a>
    </div>

    <div class="card glass-card border-0 p-4">
        <form method="post" enctype="multipart/form-data" class="needs-validation" novalidate id="createForm">
            <div asp-validation-summary="ModelOnly" class="alert alert-danger glass-card"></div>

            <div class="row g-4">
                <!-- Left Column -->
                <div class="col-lg-6">
                    <!-- Name Field -->
                    <div class="form-floating mb-4">
                        <input asp-for="MenuItem.Name" class="form-control input-futuristic" placeholder=" " required />
                        <label asp-for="MenuItem.Name" class="form-label"></label>
                        <span asp-validation-for="MenuItem.Name" class="text-danger small"></span>
                    </div>

                    <!-- Description Field -->
                    <div class="form-floating mb-4">
                        <textarea asp-for="MenuItem.Description" class="form-control input-futuristic"
                                  placeholder=" " style="height: 120px" maxlength="500"></textarea>
                        <label asp-for="MenuItem.Description" class="form-label"></label>
                        <span asp-validation-for="MenuItem.Description" class="text-danger small"></span>
                        <div class="text-end text-muted small mt-1" id="description-counter">0/500 characters</div>
                    </div>
                </div>

                <!-- Right Column -->
                <div class="col-lg-6">
                    <!-- Price Field -->
                    <div class="form-floating mb-4">
                        <input asp-for="MenuItem.Price" class="form-control input-futuristic"
                               type="number" step="0.01" placeholder=" " required min="0.01" />
                        <label asp-for="MenuItem.Price" class="form-label"></label>
                        <span asp-validation-for="MenuItem.Price" class="text-danger small"></span>
                    </div>

                    <!-- Category Field -->
                    <div class="form-floating mb-4">
                        <input asp-for="MenuItem.Category" class="form-control input-futuristic" placeholder=" " required />
                        <label asp-for="MenuItem.Category" class="form-label"></label>
                        <span asp-validation-for="MenuItem.Category" class="text-danger small"></span>
                    </div>

                    <!-- Availability Toggle -->
                    <div class="form-check form-switch mb-4 ps-0">
                        <label class="d-flex align-items-center">
                            <input class="form-check-input futuristic-switch"
                                   type="checkbox" role="switch" asp-for="MenuItem.IsAvailable" checked />
                            <span class="ms-3">@Html.DisplayNameFor(model => model.MenuItem.IsAvailable)</span>
                        </label>
                    </div>
                </div>
            </div>

            <!-- Image Upload Section -->
            <div class="mb-4">
                <label class="form-label text-muted mb-2">Menu Item Image <span class="text-danger">*</span></label>
                <input type="file" asp-for="MenuItem.ImageFile" class="form-control d-none"
                       id="imageFileInput" accept="image/*" required />

                <!-- Drag & Drop Zone -->
                <div id="imageDropZone" class="futuristic-drop-zone">
                    <div class="drop-zone-content">
                        <i class="bi bi-cloud-arrow-up display-4 text-muted mb-3"></i>
                        <h5 class="mb-2">Drag & Drop Image Here</h5>
                        <p class="text-muted small mb-3">or click to browse files</p>
                        <button type="button" class="btn btn-sm btn-outline-primary rounded-pill" id="selectImageBtn">
                            Select Image
                        </button>
                    </div>
                </div>
                <span asp-validation-for="MenuItem.ImageFile" class="text-danger small"></span>

                <!-- Upload Requirements -->
                <div class="text-muted small mt-2">
                    <i class="bi bi-info-circle"></i> Accepted formats: JPG, PNG, GIF, WebP (Max 5MB)
                </div>

                <!-- Image Preview -->
                <div id="imagePreviewContainer" class="mt-3 text-center" style="display: none;">
                    <div class="preview-header d-flex justify-content-between align-items-center mb-2">
                        <span class="text-muted small">Image Preview</span>
                        <button type="button" class="btn btn-sm btn-outline-danger"
                                id="clearImagePreview">
                            <i class="bi bi-x"></i> Clear
                        </button>
                    </div>
                    <img id="imagePreview" src="#" alt="Preview"
                         class="img-fluid rounded-3 shadow-sm preview-image" />
                    <div class="text-muted small mt-2" id="fileNameDisplay"></div>
                </div>
            </div>

            <!-- Form Buttons -->
            <div class="d-flex justify-content-end gap-3 mt-4 pt-3 border-top">
                <button type="submit" class="btn btn-primary btn-hover-glow px-4 py-2" id="submitBtn">
                    <i class="bi bi-plus-circle me-2"></i>Create Item
                </button>
                <a asp-page="./Index" class="btn btn-outline-secondary px-4 py-2">
                    Cancel
                </a>
            </div>
        </form>
    </div>
</div>

<!-- Toast Notification -->
<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
    <div id="notificationToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">Notification</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body" id="toastMessage"></div>
    </div>
</div>

    <style>
        .futuristic-drop-zone {
            border: 2px dashed #dee2e6;
            border-radius: 8px;
            padding: 2rem;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .futuristic-drop-zone.active {
                border-color: #0d6efd;
                background-color: rgba(13, 110, 253, 0.05);
            }

            .futuristic-drop-zone:hover {
                border-color: #0d6efd;
            }

        .preview-image {
            max-height: 200px;
            object-fit: contain;
        }

        .input-futuristic:focus {
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
            border-color: #86b7fe;
        }
    </style>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Elements
            const dropZone = document.getElementById('imageDropZone');
            const fileInput = document.getElementById('imageFileInput');
            const selectImageBtn = document.getElementById('selectImageBtn');
            const previewContainer = document.getElementById('imagePreviewContainer');
            const previewImage = document.getElementById('imagePreview');
            const clearPreviewBtn = document.getElementById('clearImagePreview');
            const fileNameDisplay = document.getElementById('fileNameDisplay');
            const form = document.getElementById('createForm');
            const submitBtn = document.getElementById('submitBtn');

            // Toast notification function
            function showToast(message, type = 'success') {
                const toastEl = document.getElementById('notificationToast');
                const toastMessage = document.getElementById('toastMessage');

                // Remove previous color classes
                toastEl.classList.remove('text-bg-success', 'text-bg-danger', 'text-bg-warning');

                // Set new color and message
                toastEl.classList.add(`text-bg-${type}`);
                toastMessage.textContent = message;

                // Show toast
                const toast = new bootstrap.Toast(toastEl);
                toast.show();
            }

            // Click handler for drop zone and select button
            dropZone.addEventListener('click', () => fileInput.click());
            selectImageBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                fileInput.click();
            });

            // File input change handler
            fileInput.addEventListener('change', function() {
                if (this.files && this.files[0]) {
                    handleFileSelection(this.files[0]);
                }
            });

            // Function to handle file selection
            function handleFileSelection(file) {
                const maxSize = 5 * 1024 * 1024; // 5MB
                const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];

                // Validate file type
                if (!allowedTypes.includes(file.type)) {
                    showToast('Invalid file type. Please upload JPG, PNG, GIF, or WebP', 'error');
                    resetFileInput();
                    return;
                }

                // Validate file size
                if (file.size > maxSize) {
                    showToast('File is too large. Maximum size is 5MB', 'error');
                    resetFileInput();
                    return;
                }

                // Show preview
                const reader = new FileReader();
                reader.onload = function(e) {
                    previewImage.src = e.target.result;
                    previewContainer.style.display = 'block';
                    fileNameDisplay.textContent = file.name;
                    dropZone.classList.remove('active');
                }
                reader.readAsDataURL(file);
            }

            // Drag and drop handlers
            ['dragenter', 'dragover'].forEach(eventName => {
                dropZone.addEventListener(eventName, (e) => {
                    e.preventDefault();
                    dropZone.classList.add('active');
                });
            });

            ['dragleave', 'dragend'].forEach(eventName => {
                dropZone.addEventListener(eventName, () => {
                    dropZone.classList.remove('active');
                });
            });

            dropZone.addEventListener('drop', (e) => {
                e.preventDefault();
                dropZone.classList.remove('active');

                if (e.dataTransfer.files && e.dataTransfer.files[0]) {
                    fileInput.files = e.dataTransfer.files;
                    handleFileSelection(e.dataTransfer.files[0]);
                }
            });

            // Clear preview handler
            clearPreviewBtn.addEventListener('click', function(e) {
                e.stopPropagation();
                resetFileInput();
            });

            // Reset file input and preview
            function resetFileInput() {
                fileInput.value = '';
                previewImage.src = '#';
                previewContainer.style.display = 'none';
                fileNameDisplay.textContent = '';
            }

            // Character counter for description
            const descriptionField = document.querySelector('textarea[name="MenuItem.Description"]');
            if (descriptionField) {
                const counter = document.getElementById('description-counter');

                descriptionField.addEventListener('input', function() {
                    counter.textContent = `${this.value.length}/500 characters`;

                    // Change color when approaching limit
                    if (this.value.length > 450) {
                        counter.classList.add('text-warning');
                        counter.classList.remove('text-muted');
                    } else {
                        counter.classList.add('text-muted');
                        counter.classList.remove('text-warning');
                    }

                    if (this.value.length >= 500) {
                        counter.classList.add('text-danger');
                        counter.classList.remove('text-warning');
                    }
                });

                // Trigger initial count
                descriptionField.dispatchEvent(new Event('input'));
            }

            // Form submission handler
            form.addEventListener('submit', async function(e) {
                e.preventDefault();

                // Validate file input
                if (!fileInput.files || fileInput.files.length === 0) {
                    showToast('Please select an image for the menu item', 'error');
                    return;
                }

                // Show loading state
                submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Creating...';
                submitBtn.disabled = true;

                try {
                    // Create FormData object
                    const formData = new FormData(form);

                    // Send request
                    const response = await fetch(form.action, {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'Accept': 'application/json'
                        }
                    });

                    if (response.redirected) {
                        window.location.href = response.url;
                    } else if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.title || 'Failed to create menu item');
                    }
                } catch (error) {
                    showToast(error.message, 'error');
                    submitBtn.innerHTML = '<i class="bi bi-plus-circle me-2"></i>Create Item';
                    submitBtn.disabled = false;
                }
            });

            // Add animation to form elements
            const formElements = document.querySelectorAll('.form-floating, .form-switch, .futuristic-drop-zone');
            formElements.forEach((el, index) => {
                el.style.opacity = '0';
                el.style.transform = 'translateY(20px)';
                el.style.animation = `fadeInUp 0.5s ease forwards ${index * 0.1}s`;
            });
        });
    </script>
}